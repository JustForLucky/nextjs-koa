{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\nconst userInitialState = {};\nconst LOGOUT = 'LOGOUT';\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case LOGOUT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n} // action creators\n\n\nexport function logout() {\n  return dispatch => {\n    axios.post('/logout').then(resp => {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log('logout failed', resp);\n      }\n    }).catch(error => {\n      console.log('logout error', error);\n    });\n  };\n}\nconst allReducers = combineReducers({\n  user: userReducer\n});\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["/Users/lili/projects/nextjs-koa/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","axios","userInitialState","LOGOUT","userReducer","state","action","type","user","logout","dispatch","post","then","resp","status","console","log","catch","error","allReducers","initializeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AACA,MAAMC,MAAM,GAAG,QAAf;;AACA,SAASC,WAAT,CAAqBC,KAAK,GAAGH,gBAA7B,EAA+CI,MAA/C,EAAuD;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,MAAL;AAAa;AACT,+CACOE,KADP;AAEIG,UAAAA,IAAI,EAAE;AAFV;AAIH;;AACD;AAAS;AACL,eAAOH,KAAP;AACH;AATL;AAWH,C,CAED;;;AACA,OAAO,SAASI,MAAT,GAAkB;AACrB,SAAOC,QAAQ,IAAI;AACfT,IAAAA,KAAK,CAACU,IAAN,CAAW,SAAX,EACKC,IADL,CACUC,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBJ,QAAAA,QAAQ,CAAC;AACLH,UAAAA,IAAI,EAAEJ;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACHY,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BH,IAA5B;AACH;AACJ,KATL,EAUKI,KAVL,CAUWC,KAAK,IAAI;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BE,KAA5B;AACH,KAZL;AAaH,GAdD;AAeH;AAED,MAAMC,WAAW,GAAGtB,eAAe,CAAC;AAChCW,EAAAA,IAAI,EAAEJ;AAD0B,CAAD,CAAnC;AAIA,eAAe,SAASgB,eAAT,CAAyBf,KAAzB,EAAgC;AAC3C,QAAMgB,KAAK,GAAGzB,WAAW,CACrBuB,WADqB,EAErBG,MAAM,CAACC,MAAP,CACI,EADJ,EAEI;AAAEf,IAAAA,IAAI,EAAEN;AAAR,GAFJ,EAGIG,KAHJ,CAFqB,EAOrBL,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAPE,CAAzB;AAUA,SAAOsB,KAAP;AACH","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport axios from 'axios'\n\nconst userInitialState = {}\nconst LOGOUT = 'LOGOUT'\nfunction userReducer(state = userInitialState, action) {\n    switch (action.type) {\n        case LOGOUT: {\n            return {\n                ...state,\n                user: []\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n// action creators\nexport function logout() {\n    return dispatch => {\n        axios.post('/logout')\n            .then(resp => {\n                if (resp.status === 200) {\n                    dispatch({\n                        type: LOGOUT\n                    })\n                } else {\n                    console.log('logout failed',resp)\n                }\n            })\n            .catch(error => {\n                console.log('logout error', error)\n            })\n    }\n}\n\nconst allReducers = combineReducers({\n    user: userReducer\n})\n\nexport default function initializeStore(state) {\n    const store = createStore(\n        allReducers,\n        Object.assign(\n            {},\n            { user: userInitialState },\n            state\n        ),\n        composeWithDevTools(applyMiddleware(ReduxThunk))\n    )\n\n    return store\n}"]},"metadata":{},"sourceType":"module"}